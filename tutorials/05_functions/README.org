#+TITLE: Functions

The programs we have written so far contain all their logic in a
single "function" called ~main~ (~main~ is also a function, but it is
quite special and we will cover it in detail in future
notes). However, as many other programming languages, the C
programming language offers the opportunity to group portions of code
within a function. Effectively, a function is the main modularization
mechanism in C. By modularization, we refer to the ability to separate
functionalities into independent and interchangeable components.
These notes aims at giving an introduction to functions.

* Function Definition
A function is a construction that allows to define some code and gives
it a name, so that it can be executed from various parts of the
program. In general, the role of a function is encapsulating a general
computation that can be performed on some specific data.  In fact, it
is possible customizing the behavior of a function by passing some
values called parameters, as we will see.

By function definition, we refer to the code that defines the actual
body of the function. The body is simply the code that will be
executed when we call that function. To define a function, we should
specify the return type (the data type of the value returned by the
function to the caller), the name of the function, zero or more
parameters, and the body of the function.  For example, let's define a
function that given that prints a greeting, ~print_hello~. The
~print_hello~ does not take any parameters and does not return any
value, so we are going to define ~void~ return type and ~void~
parameters as follows.

#+BEGIN_SRC c
  #include <stdio.h>

  void print_hello(void)
  {
      printf("Hello\n");
  }
#+END_SRC

Note that in the definition above we specified ~void~ as parameters,
but we could have also defined the function as follows.

#+BEGIN_SRC c
  #include <stdio.h>

  void print_hello()
  {
      printf("Hello\n");
  }
#+END_SRC

However, there is a small difference in these two definitions. The
~void~ in the parameter list explicitly declares that the function
takes no arguments, while the empty parameter list means that the
function takes an unspecified number of arguments.  That means that
calling ~print_hello(10)~ in the first definition will generate a
compiler error in the first case, while it will compile fine if we
use the second style of definitions.

A function can also change its behavior based on some inputs. For
instance, let's write a function that takes two integers and outputs
their sum.

#+BEGIN_SRC c
  #include <stdio.h>

  void print_sum(int a, int b)
  {
      printf("%d + %d = %d\n", a, b, a + b);
  }
#+END_SRC

A function can also return some value to the caller. For example,
let's write a function that given a number returns ~1~ if an input
number is prime; otherwise it returns ~0~.

#+BEGIN_SRC c
  #include <stdio.h>

  int is_prime(int n)
  {
      for (int i = 2; i*i <= n; ++i)
	  if (n % i == 0)
	      return 0;
      return 1;
  }
#+END_SRC

* Function Calls
A function call is when we use a function that we have defined
previously.  We have already seen some some functions. For example,
the ~printf~ function allows to output in the standard output some
string given a formatting (the first argument) and a variable number
of arguments that will be used to produce the formatted output.
Therefore, calling a function is as simple as spelling the name of the
function and passing the required arguments to it. An argument is a
value that is passed as input to a function invocation. As an example,
let's try to call the ~is_prime~ function to print all the primes from
~1~ to ~100~.

#+BEGIN_SRC c
  #include <stdio.h>

  int is_prime(int n)
  {
      for (int i = 2; i*i <= n; ++i)
	  if (n % i == 0)
	      return 0;
      return 1;
  }

  int main(void)
  {
      for (int i = 1; i < 100; ++i)
	  if (is_prime(i) == 1)
	      printf("%d\n", i);
  }
#+END_SRC

A function invocation is an expression that can be used as part of
other expressions. Now, let's discuss a bit the semantics of a
function call. In C, a function call is always call-by-value. In
call-by-value, the function receives a copy of the argument's value,
not the original variable itself. Changes to the parameter inside the
function do not affect the original variable. For example, consider
the following code, what will be the output if you run it?

#+BEGIN_SRC c
  #include <stdio.h>

  void increment(int value)
  {
      // It modifies the copy
      value = value + 1;
      printf("inside increment: %d\n", value);
  }

  int main()
  {
      int x = 10;
      increment(x); // passing a copy of x
      printf("inside main: %d\n", x); 
  }
#+END_SRC

* Recursion
In C, a function may call itself either directly or indirectly.  A
function that calls itself is said to be recursive.  The idea of
recursion is that a function calls itself to solve a problem by
breaking it into smaller, identical sub-problems. For example, the
computation of a factorial can be expressed as a recursion.  The
factorial of a number ~n~ is computed as ~n! = n * (n-1) * ... * 1~,
and we can write it in C as follows.

#+BEGIN_SRC c
  int factorial(int n)
  {
      /*
       * This is the base case of our recursion. In practice, it
       * defines when we should  stop the recursion calls. For the
       *factorial case, we simply return 1. 
       */
      if (n <= 1)
	  return 1;
      /*
       * This is where we make the recursive call. Do you see
       * where? We have factorial of n calling  factorial of
       * n-1.
       */
      return n * factorial(n - 1);
  }
#+END_SRC

* Exercise 1
Try to write a small program that converts a temperature from Celsius
to Fahrenheit, and outputs the conversion. However, this time define
a function to make the conversion.

* Exercise 2
Write a program that given two numbers it computes the power of the
first number to the second one. However, this time define a function
to compute the power.

* Exercise 3
An IP address is a 32-bit number which identifies an host over a
computer network. An IP address is often composed of a network part
which identifies a network, and an host part which identifies a host
within a network.  A network mask is a 32-bit number whose first n
bits are all set to 1, and they allow to "remove" the host portion of
an IP address.  Write a program that given an IP address and a network
mask it prints the network and the host portion of the address. Also,
the program should display the addresses in decimal dotted notation
that is in the format a.b.c.d where a is the first byte of an address,
b is the second byte of an address, etc. However, this time define
different functions, one to output an address, one to compute the
host part, and one to compute the network part.

* Exercise 4
Using recursion, write a function that given a number ~n~ returns the
n-th Fibonacci number.
